// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.24.2
// source: internal/testpb/test.proto

package testpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoolField    bool     `protobuf:"varint,1,opt,name=bool_field,json=boolField,proto3" json:"bool_field,omitempty"`
	StringField  string   `protobuf:"bytes,2,opt,name=string_field,json=stringField,proto3" json:"string_field,omitempty"`
	Int32Field   int32    `protobuf:"varint,3,opt,name=int32_field,json=int32Field,proto3" json:"int32_field,omitempty"`
	Int64Field   int64    `protobuf:"varint,4,opt,name=int64_field,json=int64Field,proto3" json:"int64_field,omitempty"`
	Sint32Field  int32    `protobuf:"zigzag32,5,opt,name=sint32_field,json=sint32Field,proto3" json:"sint32_field,omitempty"`
	Sint64Field  int64    `protobuf:"zigzag64,6,opt,name=sint64_field,json=sint64Field,proto3" json:"sint64_field,omitempty"`
	Uint32Field  uint32   `protobuf:"varint,7,opt,name=uint32_field,json=uint32Field,proto3" json:"uint32_field,omitempty"`
	Uint64Field  uint64   `protobuf:"varint,8,opt,name=uint64_field,json=uint64Field,proto3" json:"uint64_field,omitempty"`
	Fixed32Field uint32   `protobuf:"fixed32,9,opt,name=fixed32_field,json=fixed32Field,proto3" json:"fixed32_field,omitempty"`
	Fixed64Field uint64   `protobuf:"fixed64,10,opt,name=fixed64_field,json=fixed64Field,proto3" json:"fixed64_field,omitempty"`
	MessageField *Message `protobuf:"bytes,11,opt,name=message_field,json=messageField,proto3" json:"message_field,omitempty"`
	BytesField   []byte   `protobuf:"bytes,12,opt,name=bytes_field,json=bytesField,proto3" json:"bytes_field,omitempty"`
	// Types that are assignable to OneofField:
	//
	//	*Message_BoolOneofField
	//	*Message_StringOneofField
	//	*Message_Int32OneofField
	//	*Message_Int64OneofField
	//	*Message_Sint32OneofField
	//	*Message_Sint64OneofField
	//	*Message_Uint32OneofField
	//	*Message_Uint64OneofField
	//	*Message_Fixed32OneofField
	//	*Message_Fixed64OneofField
	//	*Message_MessageOneofField
	OneofField             isMessage_OneofField `protobuf_oneof:"oneof_field"`
	RepeatedBoolField      []bool               `protobuf:"varint,201,rep,packed,name=repeated_bool_field,json=repeatedBoolField,proto3" json:"repeated_bool_field,omitempty"`
	RepeatedStringField    []string             `protobuf:"bytes,202,rep,name=repeated_string_field,json=repeatedStringField,proto3" json:"repeated_string_field,omitempty"`
	RepeatedInt32Field     []int32              `protobuf:"varint,203,rep,packed,name=repeated_int32_field,json=repeatedInt32Field,proto3" json:"repeated_int32_field,omitempty"`
	RepeatedInt64Field     []int64              `protobuf:"varint,204,rep,packed,name=repeated_int64_field,json=repeatedInt64Field,proto3" json:"repeated_int64_field,omitempty"`
	RepeatedSint32Field    []int32              `protobuf:"zigzag32,205,rep,packed,name=repeated_sint32_field,json=repeatedSint32Field,proto3" json:"repeated_sint32_field,omitempty"`
	RepeatedSint64Field    []int64              `protobuf:"zigzag64,206,rep,packed,name=repeated_sint64_field,json=repeatedSint64Field,proto3" json:"repeated_sint64_field,omitempty"`
	RepeatedUint32Field    []uint32             `protobuf:"varint,207,rep,packed,name=repeated_uint32_field,json=repeatedUint32Field,proto3" json:"repeated_uint32_field,omitempty"`
	RepeatedUint64Field    []uint64             `protobuf:"varint,208,rep,packed,name=repeated_uint64_field,json=repeatedUint64Field,proto3" json:"repeated_uint64_field,omitempty"`
	RepeatedFixed32Field   []uint32             `protobuf:"fixed32,209,rep,packed,name=repeated_fixed32_field,json=repeatedFixed32Field,proto3" json:"repeated_fixed32_field,omitempty"`
	RepeatedFixed64Field   []uint64             `protobuf:"fixed64,210,rep,packed,name=repeated_fixed64_field,json=repeatedFixed64Field,proto3" json:"repeated_fixed64_field,omitempty"`
	RepeatedMessageField   []*Message           `protobuf:"bytes,211,rep,name=repeated_message_field,json=repeatedMessageField,proto3" json:"repeated_message_field,omitempty"`
	RepeatedBytesField     [][]byte             `protobuf:"bytes,212,rep,name=repeated_bytes_field,json=repeatedBytesField,proto3" json:"repeated_bytes_field,omitempty"`
	MapBoolStringField     map[bool]string      `protobuf:"bytes,301,rep,name=map_bool_string_field,json=mapBoolStringField,proto3" json:"map_bool_string_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringStringField   map[string]string    `protobuf:"bytes,302,rep,name=map_string_string_field,json=mapStringStringField,proto3" json:"map_string_string_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32StringField    map[int32]string     `protobuf:"bytes,303,rep,name=map_int32_string_field,json=mapInt32StringField,proto3" json:"map_int32_string_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64StringField    map[int64]string     `protobuf:"bytes,304,rep,name=map_int64_string_field,json=mapInt64StringField,proto3" json:"map_int64_string_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSint32StringField   map[int32]string     `protobuf:"bytes,305,rep,name=map_sint32_string_field,json=mapSint32StringField,proto3" json:"map_sint32_string_field,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSint64StringField   map[int64]string     `protobuf:"bytes,306,rep,name=map_sint64_string_field,json=mapSint64StringField,proto3" json:"map_sint64_string_field,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint32StringField   map[uint32]string    `protobuf:"bytes,307,rep,name=map_uint32_string_field,json=mapUint32StringField,proto3" json:"map_uint32_string_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint64StringField   map[uint64]string    `protobuf:"bytes,308,rep,name=map_uint64_string_field,json=mapUint64StringField,proto3" json:"map_uint64_string_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapFixed32StringField  map[uint32]string    `protobuf:"bytes,309,rep,name=map_fixed32_string_field,json=mapFixed32StringField,proto3" json:"map_fixed32_string_field,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapFixed64StringField  map[uint64]string    `protobuf:"bytes,310,rep,name=map_fixed64_string_field,json=mapFixed64StringField,proto3" json:"map_fixed64_string_field,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapBoolBytesField      map[bool][]byte      `protobuf:"bytes,401,rep,name=map_bool_bytes_field,json=mapBoolBytesField,proto3" json:"map_bool_bytes_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringBytesField    map[string][]byte    `protobuf:"bytes,402,rep,name=map_string_bytes_field,json=mapStringBytesField,proto3" json:"map_string_bytes_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32BytesField     map[int32][]byte     `protobuf:"bytes,403,rep,name=map_int32_bytes_field,json=mapInt32BytesField,proto3" json:"map_int32_bytes_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64BytesField     map[int64][]byte     `protobuf:"bytes,404,rep,name=map_int64_bytes_field,json=mapInt64BytesField,proto3" json:"map_int64_bytes_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSint32BytesField    map[int32][]byte     `protobuf:"bytes,405,rep,name=map_sint32_bytes_field,json=mapSint32BytesField,proto3" json:"map_sint32_bytes_field,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSint64BytesField    map[int64][]byte     `protobuf:"bytes,406,rep,name=map_sint64_bytes_field,json=mapSint64BytesField,proto3" json:"map_sint64_bytes_field,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint32BytesField    map[uint32][]byte    `protobuf:"bytes,407,rep,name=map_uint32_bytes_field,json=mapUint32BytesField,proto3" json:"map_uint32_bytes_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint64BytesField    map[uint64][]byte    `protobuf:"bytes,408,rep,name=map_uint64_bytes_field,json=mapUint64BytesField,proto3" json:"map_uint64_bytes_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapFixed32BytesField   map[uint32][]byte    `protobuf:"bytes,409,rep,name=map_fixed32_bytes_field,json=mapFixed32BytesField,proto3" json:"map_fixed32_bytes_field,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapFixed64BytesField   map[uint64][]byte    `protobuf:"bytes,410,rep,name=map_fixed64_bytes_field,json=mapFixed64BytesField,proto3" json:"map_fixed64_bytes_field,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapBoolMessageField    map[bool]*Message    `protobuf:"bytes,501,rep,name=map_bool_message_field,json=mapBoolMessageField,proto3" json:"map_bool_message_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringMessageField  map[string]*Message  `protobuf:"bytes,502,rep,name=map_string_message_field,json=mapStringMessageField,proto3" json:"map_string_message_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32MessageField   map[int32]*Message   `protobuf:"bytes,503,rep,name=map_int32_message_field,json=mapInt32MessageField,proto3" json:"map_int32_message_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64MessageField   map[int64]*Message   `protobuf:"bytes,504,rep,name=map_int64_message_field,json=mapInt64MessageField,proto3" json:"map_int64_message_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSint32MessageField  map[int32]*Message   `protobuf:"bytes,505,rep,name=map_sint32_message_field,json=mapSint32MessageField,proto3" json:"map_sint32_message_field,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSint64MessageField  map[int64]*Message   `protobuf:"bytes,506,rep,name=map_sint64_message_field,json=mapSint64MessageField,proto3" json:"map_sint64_message_field,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint32MessageField  map[uint32]*Message  `protobuf:"bytes,507,rep,name=map_uint32_message_field,json=mapUint32MessageField,proto3" json:"map_uint32_message_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint64MessageField  map[uint64]*Message  `protobuf:"bytes,508,rep,name=map_uint64_message_field,json=mapUint64MessageField,proto3" json:"map_uint64_message_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapFixed32MessageField map[uint32]*Message  `protobuf:"bytes,509,rep,name=map_fixed32_message_field,json=mapFixed32MessageField,proto3" json:"map_fixed32_message_field,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapFixed64MessageField map[uint64]*Message  `protobuf:"bytes,510,rep,name=map_fixed64_message_field,json=mapFixed64MessageField,proto3" json:"map_fixed64_message_field,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_testpb_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testpb_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_internal_testpb_test_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetBoolField() bool {
	if x != nil {
		return x.BoolField
	}
	return false
}

func (x *Message) GetStringField() string {
	if x != nil {
		return x.StringField
	}
	return ""
}

func (x *Message) GetInt32Field() int32 {
	if x != nil {
		return x.Int32Field
	}
	return 0
}

func (x *Message) GetInt64Field() int64 {
	if x != nil {
		return x.Int64Field
	}
	return 0
}

func (x *Message) GetSint32Field() int32 {
	if x != nil {
		return x.Sint32Field
	}
	return 0
}

func (x *Message) GetSint64Field() int64 {
	if x != nil {
		return x.Sint64Field
	}
	return 0
}

func (x *Message) GetUint32Field() uint32 {
	if x != nil {
		return x.Uint32Field
	}
	return 0
}

func (x *Message) GetUint64Field() uint64 {
	if x != nil {
		return x.Uint64Field
	}
	return 0
}

func (x *Message) GetFixed32Field() uint32 {
	if x != nil {
		return x.Fixed32Field
	}
	return 0
}

func (x *Message) GetFixed64Field() uint64 {
	if x != nil {
		return x.Fixed64Field
	}
	return 0
}

func (x *Message) GetMessageField() *Message {
	if x != nil {
		return x.MessageField
	}
	return nil
}

func (x *Message) GetBytesField() []byte {
	if x != nil {
		return x.BytesField
	}
	return nil
}

func (m *Message) GetOneofField() isMessage_OneofField {
	if m != nil {
		return m.OneofField
	}
	return nil
}

func (x *Message) GetBoolOneofField() bool {
	if x, ok := x.GetOneofField().(*Message_BoolOneofField); ok {
		return x.BoolOneofField
	}
	return false
}

func (x *Message) GetStringOneofField() string {
	if x, ok := x.GetOneofField().(*Message_StringOneofField); ok {
		return x.StringOneofField
	}
	return ""
}

func (x *Message) GetInt32OneofField() int32 {
	if x, ok := x.GetOneofField().(*Message_Int32OneofField); ok {
		return x.Int32OneofField
	}
	return 0
}

func (x *Message) GetInt64OneofField() int64 {
	if x, ok := x.GetOneofField().(*Message_Int64OneofField); ok {
		return x.Int64OneofField
	}
	return 0
}

func (x *Message) GetSint32OneofField() int32 {
	if x, ok := x.GetOneofField().(*Message_Sint32OneofField); ok {
		return x.Sint32OneofField
	}
	return 0
}

func (x *Message) GetSint64OneofField() int64 {
	if x, ok := x.GetOneofField().(*Message_Sint64OneofField); ok {
		return x.Sint64OneofField
	}
	return 0
}

func (x *Message) GetUint32OneofField() uint32 {
	if x, ok := x.GetOneofField().(*Message_Uint32OneofField); ok {
		return x.Uint32OneofField
	}
	return 0
}

func (x *Message) GetUint64OneofField() uint64 {
	if x, ok := x.GetOneofField().(*Message_Uint64OneofField); ok {
		return x.Uint64OneofField
	}
	return 0
}

func (x *Message) GetFixed32OneofField() uint32 {
	if x, ok := x.GetOneofField().(*Message_Fixed32OneofField); ok {
		return x.Fixed32OneofField
	}
	return 0
}

func (x *Message) GetFixed64OneofField() uint64 {
	if x, ok := x.GetOneofField().(*Message_Fixed64OneofField); ok {
		return x.Fixed64OneofField
	}
	return 0
}

func (x *Message) GetMessageOneofField() *Message {
	if x, ok := x.GetOneofField().(*Message_MessageOneofField); ok {
		return x.MessageOneofField
	}
	return nil
}

func (x *Message) GetRepeatedBoolField() []bool {
	if x != nil {
		return x.RepeatedBoolField
	}
	return nil
}

func (x *Message) GetRepeatedStringField() []string {
	if x != nil {
		return x.RepeatedStringField
	}
	return nil
}

func (x *Message) GetRepeatedInt32Field() []int32 {
	if x != nil {
		return x.RepeatedInt32Field
	}
	return nil
}

func (x *Message) GetRepeatedInt64Field() []int64 {
	if x != nil {
		return x.RepeatedInt64Field
	}
	return nil
}

func (x *Message) GetRepeatedSint32Field() []int32 {
	if x != nil {
		return x.RepeatedSint32Field
	}
	return nil
}

func (x *Message) GetRepeatedSint64Field() []int64 {
	if x != nil {
		return x.RepeatedSint64Field
	}
	return nil
}

func (x *Message) GetRepeatedUint32Field() []uint32 {
	if x != nil {
		return x.RepeatedUint32Field
	}
	return nil
}

func (x *Message) GetRepeatedUint64Field() []uint64 {
	if x != nil {
		return x.RepeatedUint64Field
	}
	return nil
}

func (x *Message) GetRepeatedFixed32Field() []uint32 {
	if x != nil {
		return x.RepeatedFixed32Field
	}
	return nil
}

func (x *Message) GetRepeatedFixed64Field() []uint64 {
	if x != nil {
		return x.RepeatedFixed64Field
	}
	return nil
}

func (x *Message) GetRepeatedMessageField() []*Message {
	if x != nil {
		return x.RepeatedMessageField
	}
	return nil
}

func (x *Message) GetRepeatedBytesField() [][]byte {
	if x != nil {
		return x.RepeatedBytesField
	}
	return nil
}

func (x *Message) GetMapBoolStringField() map[bool]string {
	if x != nil {
		return x.MapBoolStringField
	}
	return nil
}

func (x *Message) GetMapStringStringField() map[string]string {
	if x != nil {
		return x.MapStringStringField
	}
	return nil
}

func (x *Message) GetMapInt32StringField() map[int32]string {
	if x != nil {
		return x.MapInt32StringField
	}
	return nil
}

func (x *Message) GetMapInt64StringField() map[int64]string {
	if x != nil {
		return x.MapInt64StringField
	}
	return nil
}

func (x *Message) GetMapSint32StringField() map[int32]string {
	if x != nil {
		return x.MapSint32StringField
	}
	return nil
}

func (x *Message) GetMapSint64StringField() map[int64]string {
	if x != nil {
		return x.MapSint64StringField
	}
	return nil
}

func (x *Message) GetMapUint32StringField() map[uint32]string {
	if x != nil {
		return x.MapUint32StringField
	}
	return nil
}

func (x *Message) GetMapUint64StringField() map[uint64]string {
	if x != nil {
		return x.MapUint64StringField
	}
	return nil
}

func (x *Message) GetMapFixed32StringField() map[uint32]string {
	if x != nil {
		return x.MapFixed32StringField
	}
	return nil
}

func (x *Message) GetMapFixed64StringField() map[uint64]string {
	if x != nil {
		return x.MapFixed64StringField
	}
	return nil
}

func (x *Message) GetMapBoolBytesField() map[bool][]byte {
	if x != nil {
		return x.MapBoolBytesField
	}
	return nil
}

func (x *Message) GetMapStringBytesField() map[string][]byte {
	if x != nil {
		return x.MapStringBytesField
	}
	return nil
}

func (x *Message) GetMapInt32BytesField() map[int32][]byte {
	if x != nil {
		return x.MapInt32BytesField
	}
	return nil
}

func (x *Message) GetMapInt64BytesField() map[int64][]byte {
	if x != nil {
		return x.MapInt64BytesField
	}
	return nil
}

func (x *Message) GetMapSint32BytesField() map[int32][]byte {
	if x != nil {
		return x.MapSint32BytesField
	}
	return nil
}

func (x *Message) GetMapSint64BytesField() map[int64][]byte {
	if x != nil {
		return x.MapSint64BytesField
	}
	return nil
}

func (x *Message) GetMapUint32BytesField() map[uint32][]byte {
	if x != nil {
		return x.MapUint32BytesField
	}
	return nil
}

func (x *Message) GetMapUint64BytesField() map[uint64][]byte {
	if x != nil {
		return x.MapUint64BytesField
	}
	return nil
}

func (x *Message) GetMapFixed32BytesField() map[uint32][]byte {
	if x != nil {
		return x.MapFixed32BytesField
	}
	return nil
}

func (x *Message) GetMapFixed64BytesField() map[uint64][]byte {
	if x != nil {
		return x.MapFixed64BytesField
	}
	return nil
}

func (x *Message) GetMapBoolMessageField() map[bool]*Message {
	if x != nil {
		return x.MapBoolMessageField
	}
	return nil
}

func (x *Message) GetMapStringMessageField() map[string]*Message {
	if x != nil {
		return x.MapStringMessageField
	}
	return nil
}

func (x *Message) GetMapInt32MessageField() map[int32]*Message {
	if x != nil {
		return x.MapInt32MessageField
	}
	return nil
}

func (x *Message) GetMapInt64MessageField() map[int64]*Message {
	if x != nil {
		return x.MapInt64MessageField
	}
	return nil
}

func (x *Message) GetMapSint32MessageField() map[int32]*Message {
	if x != nil {
		return x.MapSint32MessageField
	}
	return nil
}

func (x *Message) GetMapSint64MessageField() map[int64]*Message {
	if x != nil {
		return x.MapSint64MessageField
	}
	return nil
}

func (x *Message) GetMapUint32MessageField() map[uint32]*Message {
	if x != nil {
		return x.MapUint32MessageField
	}
	return nil
}

func (x *Message) GetMapUint64MessageField() map[uint64]*Message {
	if x != nil {
		return x.MapUint64MessageField
	}
	return nil
}

func (x *Message) GetMapFixed32MessageField() map[uint32]*Message {
	if x != nil {
		return x.MapFixed32MessageField
	}
	return nil
}

func (x *Message) GetMapFixed64MessageField() map[uint64]*Message {
	if x != nil {
		return x.MapFixed64MessageField
	}
	return nil
}

type isMessage_OneofField interface {
	isMessage_OneofField()
}

type Message_BoolOneofField struct {
	BoolOneofField bool `protobuf:"varint,101,opt,name=bool_oneof_field,json=boolOneofField,proto3,oneof"`
}

type Message_StringOneofField struct {
	StringOneofField string `protobuf:"bytes,102,opt,name=string_oneof_field,json=stringOneofField,proto3,oneof"`
}

type Message_Int32OneofField struct {
	Int32OneofField int32 `protobuf:"varint,103,opt,name=int32_oneof_field,json=int32OneofField,proto3,oneof"`
}

type Message_Int64OneofField struct {
	Int64OneofField int64 `protobuf:"varint,104,opt,name=int64_oneof_field,json=int64OneofField,proto3,oneof"`
}

type Message_Sint32OneofField struct {
	Sint32OneofField int32 `protobuf:"zigzag32,105,opt,name=sint32_oneof_field,json=sint32OneofField,proto3,oneof"`
}

type Message_Sint64OneofField struct {
	Sint64OneofField int64 `protobuf:"zigzag64,106,opt,name=sint64_oneof_field,json=sint64OneofField,proto3,oneof"`
}

type Message_Uint32OneofField struct {
	Uint32OneofField uint32 `protobuf:"varint,107,opt,name=uint32_oneof_field,json=uint32OneofField,proto3,oneof"`
}

type Message_Uint64OneofField struct {
	Uint64OneofField uint64 `protobuf:"varint,108,opt,name=uint64_oneof_field,json=uint64OneofField,proto3,oneof"`
}

type Message_Fixed32OneofField struct {
	Fixed32OneofField uint32 `protobuf:"fixed32,109,opt,name=fixed32_oneof_field,json=fixed32OneofField,proto3,oneof"`
}

type Message_Fixed64OneofField struct {
	Fixed64OneofField uint64 `protobuf:"fixed64,110,opt,name=fixed64_oneof_field,json=fixed64OneofField,proto3,oneof"`
}

type Message_MessageOneofField struct {
	MessageOneofField *Message `protobuf:"bytes,111,opt,name=message_oneof_field,json=messageOneofField,proto3,oneof"`
}

func (*Message_BoolOneofField) isMessage_OneofField() {}

func (*Message_StringOneofField) isMessage_OneofField() {}

func (*Message_Int32OneofField) isMessage_OneofField() {}

func (*Message_Int64OneofField) isMessage_OneofField() {}

func (*Message_Sint32OneofField) isMessage_OneofField() {}

func (*Message_Sint64OneofField) isMessage_OneofField() {}

func (*Message_Uint32OneofField) isMessage_OneofField() {}

func (*Message_Uint64OneofField) isMessage_OneofField() {}

func (*Message_Fixed32OneofField) isMessage_OneofField() {}

func (*Message_Fixed64OneofField) isMessage_OneofField() {}

func (*Message_MessageOneofField) isMessage_OneofField() {}

var File_internal_testpb_test_proto protoreflect.FileDescriptor

var file_internal_testpb_test_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x64, 0x65,
	0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x22, 0xdd, 0x3d, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x4a, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75,
	0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4f, 0x6e, 0x65,
	0x6f, 0x66, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4f, 0x6e, 0x65, 0x6f, 0x66,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x11, 0x48, 0x00, 0x52, 0x10, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4f, 0x6e, 0x65, 0x6f, 0x66,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x12, 0x48, 0x00, 0x52, 0x10, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4f, 0x6e, 0x65, 0x6f, 0x66,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x6b, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4f, 0x6e, 0x65, 0x6f, 0x66,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x6c, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4f, 0x6e, 0x65, 0x6f, 0x66,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x6d, 0x20, 0x01,
	0x28, 0x07, 0x48, 0x00, 0x52, 0x11, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4f, 0x6e, 0x65,
	0x6f, 0x66, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52, 0x11, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x57, 0x0a, 0x13, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72,
	0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xc9, 0x01, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x11, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xca, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0xcb, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0xcc, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x33,
	0x0a, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xcd, 0x01, 0x20, 0x03, 0x28, 0x11, 0x52, 0x13,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xce, 0x01, 0x20,
	0x03, 0x28, 0x12, 0x52, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0xcf, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x33, 0x0a,
	0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xd0, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x13, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xd1, 0x01, 0x20,
	0x03, 0x28, 0x07, 0x52, 0x14, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0xd2, 0x01, 0x20, 0x03, 0x28, 0x06, 0x52, 0x14, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x5c, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xd3, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63,
	0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x31,
	0x0a, 0x14, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xd4, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x12, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x71, 0x0a, 0x15, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xad, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63,
	0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x12, 0x6d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x77, 0x0a, 0x17, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0xae, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72,
	0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x74, 0x0a,
	0x16, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xaf, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13,
	0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x74, 0x0a, 0x16, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xb0, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61,
	0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x77, 0x0a, 0x17, 0x6d, 0x61, 0x70,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0xb1, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6d, 0x61,
	0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x77, 0x0a, 0x17, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xb2, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61,
	0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x77, 0x0a, 0x17, 0x6d,
	0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xb3, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14,
	0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x77, 0x0a, 0x17, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0xb4, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72,
	0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x7a, 0x0a,
	0x18, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xb5, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68,
	0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x15, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x7a, 0x0a, 0x18, 0x6d, 0x61, 0x70,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xb6, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15,
	0x6d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x6e, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x91, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61,
	0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x42,
	0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x74, 0x0a, 0x16, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x92, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72,
	0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x71, 0x0a, 0x15, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x93, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x71,
	0x0a, 0x15, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x94, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x74, 0x0a, 0x16, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x95, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69,
	0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x13, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x74, 0x0a, 0x16, 0x6d, 0x61, 0x70, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x96, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62,
	0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x74, 0x0a,
	0x16, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x97, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13,
	0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x74, 0x0a, 0x16, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x98, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61,
	0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x77, 0x0a, 0x17, 0x6d, 0x61, 0x70,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x99, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6d, 0x61,
	0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x77, 0x0a, 0x17, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x9a, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61,
	0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x74, 0x0a, 0x16, 0x6d,
	0x61, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xf5, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x6d, 0x61,
	0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x7a, 0x0a, 0x18, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xf6, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61,
	0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x77, 0x0a,
	0x17, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xf7, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x14, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x77, 0x0a, 0x17, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0xf8, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62,
	0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x7a, 0x0a, 0x18, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xf9, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69,
	0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x7a, 0x0a, 0x18, 0x6d,
	0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xfa, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x15, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x7a, 0x0a, 0x18, 0x6d, 0x61, 0x70, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0xfb, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x6d, 0x61,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x7a, 0x0a, 0x18, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0xfc, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72,
	0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x7d, 0x0a, 0x19, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xfd, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76,
	0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x7d,
	0x0a, 0x19, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xfe, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69,
	0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x45, 0x0a,
	0x17, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a,
	0x18, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a,
	0x19, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x47, 0x0a, 0x19, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x4d, 0x61, 0x70, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x48, 0x0a, 0x1a, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x1a, 0x4d,
	0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x46, 0x0a, 0x18, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x4d, 0x61, 0x70,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x46, 0x0a, 0x18, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x4d, 0x61, 0x70,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x47, 0x0a, 0x19, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x4d, 0x61,
	0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x6d, 0x0a, 0x18, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68,
	0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x6f, 0x0a, 0x1a, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63,
	0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x6e, 0x0a, 0x19, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63,
	0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x6e, 0x0a, 0x19, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63,
	0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x6f, 0x0a, 0x1a, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69,
	0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6f, 0x0a, 0x1a, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61, 0x76,
	0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6f, 0x0a, 0x1a, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x61,
	0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6f, 0x0a, 0x1a, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75, 0x72, 0x73,
	0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x70, 0x0a, 0x1b, 0x4d, 0x61, 0x70, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x62, 0x75,
	0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x70, 0x0a, 0x1b, 0x4d, 0x61, 0x70,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x62, 0x75, 0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x29, 0x5a, 0x27, 0x62, 0x75,
	0x72, 0x73, 0x61, 0x76, 0x69, 0x63, 0x68, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_testpb_test_proto_rawDescOnce sync.Once
	file_internal_testpb_test_proto_rawDescData = file_internal_testpb_test_proto_rawDesc
)

func file_internal_testpb_test_proto_rawDescGZIP() []byte {
	file_internal_testpb_test_proto_rawDescOnce.Do(func() {
		file_internal_testpb_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_testpb_test_proto_rawDescData)
	})
	return file_internal_testpb_test_proto_rawDescData
}

var file_internal_testpb_test_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_internal_testpb_test_proto_goTypes = []interface{}{
	(*Message)(nil), // 0: dev.bursavich.fieldmask.test.Message
	nil,             // 1: dev.bursavich.fieldmask.test.Message.MapBoolStringFieldEntry
	nil,             // 2: dev.bursavich.fieldmask.test.Message.MapStringStringFieldEntry
	nil,             // 3: dev.bursavich.fieldmask.test.Message.MapInt32StringFieldEntry
	nil,             // 4: dev.bursavich.fieldmask.test.Message.MapInt64StringFieldEntry
	nil,             // 5: dev.bursavich.fieldmask.test.Message.MapSint32StringFieldEntry
	nil,             // 6: dev.bursavich.fieldmask.test.Message.MapSint64StringFieldEntry
	nil,             // 7: dev.bursavich.fieldmask.test.Message.MapUint32StringFieldEntry
	nil,             // 8: dev.bursavich.fieldmask.test.Message.MapUint64StringFieldEntry
	nil,             // 9: dev.bursavich.fieldmask.test.Message.MapFixed32StringFieldEntry
	nil,             // 10: dev.bursavich.fieldmask.test.Message.MapFixed64StringFieldEntry
	nil,             // 11: dev.bursavich.fieldmask.test.Message.MapBoolBytesFieldEntry
	nil,             // 12: dev.bursavich.fieldmask.test.Message.MapStringBytesFieldEntry
	nil,             // 13: dev.bursavich.fieldmask.test.Message.MapInt32BytesFieldEntry
	nil,             // 14: dev.bursavich.fieldmask.test.Message.MapInt64BytesFieldEntry
	nil,             // 15: dev.bursavich.fieldmask.test.Message.MapSint32BytesFieldEntry
	nil,             // 16: dev.bursavich.fieldmask.test.Message.MapSint64BytesFieldEntry
	nil,             // 17: dev.bursavich.fieldmask.test.Message.MapUint32BytesFieldEntry
	nil,             // 18: dev.bursavich.fieldmask.test.Message.MapUint64BytesFieldEntry
	nil,             // 19: dev.bursavich.fieldmask.test.Message.MapFixed32BytesFieldEntry
	nil,             // 20: dev.bursavich.fieldmask.test.Message.MapFixed64BytesFieldEntry
	nil,             // 21: dev.bursavich.fieldmask.test.Message.MapBoolMessageFieldEntry
	nil,             // 22: dev.bursavich.fieldmask.test.Message.MapStringMessageFieldEntry
	nil,             // 23: dev.bursavich.fieldmask.test.Message.MapInt32MessageFieldEntry
	nil,             // 24: dev.bursavich.fieldmask.test.Message.MapInt64MessageFieldEntry
	nil,             // 25: dev.bursavich.fieldmask.test.Message.MapSint32MessageFieldEntry
	nil,             // 26: dev.bursavich.fieldmask.test.Message.MapSint64MessageFieldEntry
	nil,             // 27: dev.bursavich.fieldmask.test.Message.MapUint32MessageFieldEntry
	nil,             // 28: dev.bursavich.fieldmask.test.Message.MapUint64MessageFieldEntry
	nil,             // 29: dev.bursavich.fieldmask.test.Message.MapFixed32MessageFieldEntry
	nil,             // 30: dev.bursavich.fieldmask.test.Message.MapFixed64MessageFieldEntry
}
var file_internal_testpb_test_proto_depIdxs = []int32{
	0,  // 0: dev.bursavich.fieldmask.test.Message.message_field:type_name -> dev.bursavich.fieldmask.test.Message
	0,  // 1: dev.bursavich.fieldmask.test.Message.message_oneof_field:type_name -> dev.bursavich.fieldmask.test.Message
	0,  // 2: dev.bursavich.fieldmask.test.Message.repeated_message_field:type_name -> dev.bursavich.fieldmask.test.Message
	1,  // 3: dev.bursavich.fieldmask.test.Message.map_bool_string_field:type_name -> dev.bursavich.fieldmask.test.Message.MapBoolStringFieldEntry
	2,  // 4: dev.bursavich.fieldmask.test.Message.map_string_string_field:type_name -> dev.bursavich.fieldmask.test.Message.MapStringStringFieldEntry
	3,  // 5: dev.bursavich.fieldmask.test.Message.map_int32_string_field:type_name -> dev.bursavich.fieldmask.test.Message.MapInt32StringFieldEntry
	4,  // 6: dev.bursavich.fieldmask.test.Message.map_int64_string_field:type_name -> dev.bursavich.fieldmask.test.Message.MapInt64StringFieldEntry
	5,  // 7: dev.bursavich.fieldmask.test.Message.map_sint32_string_field:type_name -> dev.bursavich.fieldmask.test.Message.MapSint32StringFieldEntry
	6,  // 8: dev.bursavich.fieldmask.test.Message.map_sint64_string_field:type_name -> dev.bursavich.fieldmask.test.Message.MapSint64StringFieldEntry
	7,  // 9: dev.bursavich.fieldmask.test.Message.map_uint32_string_field:type_name -> dev.bursavich.fieldmask.test.Message.MapUint32StringFieldEntry
	8,  // 10: dev.bursavich.fieldmask.test.Message.map_uint64_string_field:type_name -> dev.bursavich.fieldmask.test.Message.MapUint64StringFieldEntry
	9,  // 11: dev.bursavich.fieldmask.test.Message.map_fixed32_string_field:type_name -> dev.bursavich.fieldmask.test.Message.MapFixed32StringFieldEntry
	10, // 12: dev.bursavich.fieldmask.test.Message.map_fixed64_string_field:type_name -> dev.bursavich.fieldmask.test.Message.MapFixed64StringFieldEntry
	11, // 13: dev.bursavich.fieldmask.test.Message.map_bool_bytes_field:type_name -> dev.bursavich.fieldmask.test.Message.MapBoolBytesFieldEntry
	12, // 14: dev.bursavich.fieldmask.test.Message.map_string_bytes_field:type_name -> dev.bursavich.fieldmask.test.Message.MapStringBytesFieldEntry
	13, // 15: dev.bursavich.fieldmask.test.Message.map_int32_bytes_field:type_name -> dev.bursavich.fieldmask.test.Message.MapInt32BytesFieldEntry
	14, // 16: dev.bursavich.fieldmask.test.Message.map_int64_bytes_field:type_name -> dev.bursavich.fieldmask.test.Message.MapInt64BytesFieldEntry
	15, // 17: dev.bursavich.fieldmask.test.Message.map_sint32_bytes_field:type_name -> dev.bursavich.fieldmask.test.Message.MapSint32BytesFieldEntry
	16, // 18: dev.bursavich.fieldmask.test.Message.map_sint64_bytes_field:type_name -> dev.bursavich.fieldmask.test.Message.MapSint64BytesFieldEntry
	17, // 19: dev.bursavich.fieldmask.test.Message.map_uint32_bytes_field:type_name -> dev.bursavich.fieldmask.test.Message.MapUint32BytesFieldEntry
	18, // 20: dev.bursavich.fieldmask.test.Message.map_uint64_bytes_field:type_name -> dev.bursavich.fieldmask.test.Message.MapUint64BytesFieldEntry
	19, // 21: dev.bursavich.fieldmask.test.Message.map_fixed32_bytes_field:type_name -> dev.bursavich.fieldmask.test.Message.MapFixed32BytesFieldEntry
	20, // 22: dev.bursavich.fieldmask.test.Message.map_fixed64_bytes_field:type_name -> dev.bursavich.fieldmask.test.Message.MapFixed64BytesFieldEntry
	21, // 23: dev.bursavich.fieldmask.test.Message.map_bool_message_field:type_name -> dev.bursavich.fieldmask.test.Message.MapBoolMessageFieldEntry
	22, // 24: dev.bursavich.fieldmask.test.Message.map_string_message_field:type_name -> dev.bursavich.fieldmask.test.Message.MapStringMessageFieldEntry
	23, // 25: dev.bursavich.fieldmask.test.Message.map_int32_message_field:type_name -> dev.bursavich.fieldmask.test.Message.MapInt32MessageFieldEntry
	24, // 26: dev.bursavich.fieldmask.test.Message.map_int64_message_field:type_name -> dev.bursavich.fieldmask.test.Message.MapInt64MessageFieldEntry
	25, // 27: dev.bursavich.fieldmask.test.Message.map_sint32_message_field:type_name -> dev.bursavich.fieldmask.test.Message.MapSint32MessageFieldEntry
	26, // 28: dev.bursavich.fieldmask.test.Message.map_sint64_message_field:type_name -> dev.bursavich.fieldmask.test.Message.MapSint64MessageFieldEntry
	27, // 29: dev.bursavich.fieldmask.test.Message.map_uint32_message_field:type_name -> dev.bursavich.fieldmask.test.Message.MapUint32MessageFieldEntry
	28, // 30: dev.bursavich.fieldmask.test.Message.map_uint64_message_field:type_name -> dev.bursavich.fieldmask.test.Message.MapUint64MessageFieldEntry
	29, // 31: dev.bursavich.fieldmask.test.Message.map_fixed32_message_field:type_name -> dev.bursavich.fieldmask.test.Message.MapFixed32MessageFieldEntry
	30, // 32: dev.bursavich.fieldmask.test.Message.map_fixed64_message_field:type_name -> dev.bursavich.fieldmask.test.Message.MapFixed64MessageFieldEntry
	0,  // 33: dev.bursavich.fieldmask.test.Message.MapBoolMessageFieldEntry.value:type_name -> dev.bursavich.fieldmask.test.Message
	0,  // 34: dev.bursavich.fieldmask.test.Message.MapStringMessageFieldEntry.value:type_name -> dev.bursavich.fieldmask.test.Message
	0,  // 35: dev.bursavich.fieldmask.test.Message.MapInt32MessageFieldEntry.value:type_name -> dev.bursavich.fieldmask.test.Message
	0,  // 36: dev.bursavich.fieldmask.test.Message.MapInt64MessageFieldEntry.value:type_name -> dev.bursavich.fieldmask.test.Message
	0,  // 37: dev.bursavich.fieldmask.test.Message.MapSint32MessageFieldEntry.value:type_name -> dev.bursavich.fieldmask.test.Message
	0,  // 38: dev.bursavich.fieldmask.test.Message.MapSint64MessageFieldEntry.value:type_name -> dev.bursavich.fieldmask.test.Message
	0,  // 39: dev.bursavich.fieldmask.test.Message.MapUint32MessageFieldEntry.value:type_name -> dev.bursavich.fieldmask.test.Message
	0,  // 40: dev.bursavich.fieldmask.test.Message.MapUint64MessageFieldEntry.value:type_name -> dev.bursavich.fieldmask.test.Message
	0,  // 41: dev.bursavich.fieldmask.test.Message.MapFixed32MessageFieldEntry.value:type_name -> dev.bursavich.fieldmask.test.Message
	0,  // 42: dev.bursavich.fieldmask.test.Message.MapFixed64MessageFieldEntry.value:type_name -> dev.bursavich.fieldmask.test.Message
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_internal_testpb_test_proto_init() }
func file_internal_testpb_test_proto_init() {
	if File_internal_testpb_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_testpb_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_internal_testpb_test_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Message_BoolOneofField)(nil),
		(*Message_StringOneofField)(nil),
		(*Message_Int32OneofField)(nil),
		(*Message_Int64OneofField)(nil),
		(*Message_Sint32OneofField)(nil),
		(*Message_Sint64OneofField)(nil),
		(*Message_Uint32OneofField)(nil),
		(*Message_Uint64OneofField)(nil),
		(*Message_Fixed32OneofField)(nil),
		(*Message_Fixed64OneofField)(nil),
		(*Message_MessageOneofField)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_testpb_test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_testpb_test_proto_goTypes,
		DependencyIndexes: file_internal_testpb_test_proto_depIdxs,
		MessageInfos:      file_internal_testpb_test_proto_msgTypes,
	}.Build()
	File_internal_testpb_test_proto = out.File
	file_internal_testpb_test_proto_rawDesc = nil
	file_internal_testpb_test_proto_goTypes = nil
	file_internal_testpb_test_proto_depIdxs = nil
}
